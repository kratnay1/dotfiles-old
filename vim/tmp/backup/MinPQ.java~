
import java.util.Comparator;
import java.util.Iterator;
import java.util.NoSuchElementException;

/**
 *  The <tt>MinPQ</tt> class represents a priority queue of generic keys.
 *  It supports the usual <em>insert</em> and <em>delete-the-minimum</em>
 *  operations, along with methods for peeking at the minimum key,
 *  testing if the priority queue is empty, and iterating through
 *  the keys.
 *  <p>
 *  This implementation uses a binary heap.
 *  The <em>insert</em> and <em>delete-the-minimum</em> operations take
 *  logarithmic amortized time.
 *  The <em>min</em>, <em>size</em>, and <em>is-empty</em>
 *   operations take constant time.
 *  Construction takes time proportional to the specified capacity or the number of
 *  items used to initialize the data structure.
 *  <p>
 *  For additional documentation, 
 *  see <a href="http://algs4.cs.princeton.edu/24pq">Section 2.4</a> of
 *  <i>Algorithms, 4th Edition</i> by Robert Sedgewick and Kevin Wayne.
 *
 *  @author Robert Sedgewick
 *  @author Kevin Wayne
 */
public class MinPQ<Key> implements Iterable<Key> {

    /** Store items at indices 1 to N. */
    private Key[] pq;               

    /** Number of items on priority queue. */
    private int N;                    

    /** Optional comparator. */
    private Comparator<Key> comparator;  

    /**
     * Initializes an empty priority queue with the given initial capacity.
     * @param initCapacity the initial capacity of the priority queue
     */
    public MinPQ(int initCapacity) {
        this.pq = (Key[]) new Object[initCapacity + 1];
        this.N = 0;
    }

    /**
     * Initializes an empty priority queue.
     */
    public MinPQ() {
        this(1);
    }

    /**
     * Initializes an empty priority queue with the given initial capacity,
     * using the given comparator.
     * @param initCapacity the initial capacity of the priority queue
     * @param comparator the order to use when comparing keys
     */
    public MinPQ(int initCapacity, Comparator<Key> comparator) {
        this.comparator = comparator;
        this.pq = (Key[]) new Object[initCapacity + 1];
        this.N = 0;
    }

    /**
     * Initializes an empty priority queue using the given comparator.
     * @param comparator the order to use when comparing keys
     */
    public MinPQ(Comparator<Key> comparator) { 
        this(1, comparator); 
    }

    /**
     * Initializes a priority queue from the array of keys.
     * Takes time proportional to the number of keys, using sink-based heap construction.
     * @param keys the array of keys
     */
    public MinPQ(Key[] keys) {
        this.N = keys.length;
        this.pq = (Key[]) new Object[keys.length + 1];
        for (int i = 0; i < N; i++)
            this.pq[i+1] = keys[i];
        for (int k = N/2; k >= 1; k--)
            this.sink(k);
        assert this.isMinHeap();
    }

    /**
     * Is the priority queue empty?
     * @return true if the priority queue is empty; false otherwise
     */
    public boolean isEmpty() {
        return N == 0;
    }

    /**
     * Returns the number of keys on the priority queue.
     * @return the number of keys on the priority queue
     */
    public int size() {
        return N;
    }

    /**
     * Returns a smallest key on the priority queue.
     * @return a smallest key on the priority queue
     * @throws java.util.NoSuchElementException if priority queue is empty
     */
    public Key min() {
        if (isEmpty()) {
            throw new NoSuchElementException("Priority queue underflow");
        }
        return this.pq[1];
    }

    // helper function to double the size of the heap array
    private void resize(int capacity) {
        assert capacity > this.N;
        Key[] temp = (Key[]) new Object[capacity];
        for (int i = 1; i <= this.N; i++) {
            temp[i] = this.pq[i];
        }
        this.pq = temp;
    }

    /**
     * Adds a new key to the priority queue.
     * @param x the key to add to the priority queue
     */
    public void insert(Key x) {
        // double size of array if necessary
        if (N == pq.length - 1) {
            this.resize(2 * this.pq.length);
        }

        // add x, and percolate it up to maintain heap invariant
        this.pq[++N] = x;
        this.swim(N);
        assert this.isMinHeap();
    }

    /**
     * Removes and returns a smallest key on the priority queue.
     * @return a smallest key on the priority queue
     * @throws java.util.NoSuchElementException if the priority queue is empty
     */
    public Key delMin() {
        if (isEmpty()) throw new NoSuchElementException("Priority queue underflow");
        exch(1, N);
        Key min = pq[this.N--];
        this.sink(1);
        this.pq[N+1] = null;         // avoid loitering and help with garbage collection
        if ((N > 0) && (N == (pq.length - 1) / 4)) this.resize(pq.length  / 2);
        assert this.isMinHeap();
        return min;
    }


   /***********************************************************************
    * Helper functions to restore the heap invariant.
    **********************************************************************/

    private void swim(int k) {
        while (k > 1 && this.greater(k / 2, k)) {
            this.exch(k, k / 2);
            k = k / 2;
        }
    }

    private void sink(int k) {
        while (2 * k <= N) {
            int j = 2 * k;
            if (j < N && this.greater(j, j + 1)) j++;
            if (!this.greater(k, j)) break;
            this.exch(k, j);
            k = j;
        }
    }

   /***********************************************************************
    * Helper functions for compares and swaps.
    **********************************************************************/
    private boolean greater(int i, int j) {
        if (this.comparator == null) {
            return ((Comparable<Key>) pq[i]).compareTo(pq[j]) > 0;
        } else {
            return this.comparator.compare(pq[i], pq[j]) > 0;
        }
    }

    private void exch(int i, int j) {
        Key swap = this.pq[i];
        this.pq[i] = this.pq[j];
        this.pq[j] = swap;
    }

    // is pq[1..N] a min heap?
    private boolean isMinHeap() {
        return this.isMinHeap(1);
    }

    // is subtree of pq[1..N] rooted at k a min heap?
    private boolean isMinHeap(int k) {
        if (k > N) {
            return true;
        }
        int left = 2 * k;
        int right = 2 * k + 1;
        if (left  <= N && greater(k, left))  {
            return false;
        }
        if (right <= N && greater(k, right)) {
            return false;
        }
        return this.isMinHeap(left) && this.isMinHeap(right);
    }


   /***********************************************************************
    * Iterators
    **********************************************************************/

    /**
     * Returns an iterator that iterates over the keys on the priority queue
     * in ascending order.
     * The iterator doesn't implement <tt>remove()</tt> since it's optional.
     * @return an iterator that iterates over the keys in ascending order
     */
    public Iterator<Key> iterator() { 
        return new HeapIterator();
    }

    private class HeapIterator implements Iterator<Key> {
        /** Create a new pq. */
        private MinPQ<Key> copy;

        // add all items to copy of heap
        // takes linear time since already in heap order so no keys move
        /**
         * Add al items to copy of heap.
         * @return  the heap iterator
         */
        public HeapIterator() {
            if (comparator == null) {
                copy = new MinPQ<Key>(size());
            } else {
                copy = new MinPQ<Key>(size(), comparator);
            }
            for (int i = 1; i <= N; i++) {
                copy.insert(pq[i]);
            }
        }

        /**
         * Checks if iterator has a next element.
         * @return  true if there's a next element, false otherwise
         */
        public boolean hasNext()  { 
            return !copy.isEmpty();    
        }

        /**
         * Remove not implemented for iterator.
         */
        public void remove() { 
            throw new UnsupportedOperationException();  
        }

        /**
         * Returns next key.
         * @return  the key
         */
        public Key next() {
            if (!hasNext()) {
                throw new NoSuchElementException();
            }
            return copy.delMin();
        }
    }


}

