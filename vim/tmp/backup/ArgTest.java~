import com.gargoylesoftware.htmlunit.*;
import com.gargoylesoftware.htmlunit.html.*;
import java.util.Scanner;
import java.io.PrintWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;


public class ArgTest {

    // array list of symmorphic group numbers
    private static ArrayList<String> sgroups;


    // constructor. fills list of symmophic group numbers from file
    public ArgTest() {
        this.sgroups = new ArrayList<String>();
        try {
            Scanner scan1 = new Scanner(new File("Sgroups.dat"));
            while (scan1.hasNextLine()) {
                sgroups.add(scan1.nextLine());
            }
        } catch (FileNotFoundException e) { }
    }


    // returns a list of all combinations of two Lists of cosets
    private ArrayList<String> combineTwoLists(ArrayList<String> list1, ArrayList<String> list2) {
        ArrayList<String> combined = new ArrayList<String>();
        String combStr;
        for (String str1 : list1) {
            for (String str2 : list2) {
                combStr = "";
                combStr = str1 + "\n" + str2;
                combined.add(combStr);
            }
        }
        return combined;
    }


    // returns a list of all combinations of all Lists of cosets
    private ArrayList<String> getCombinations(ArrayList<ArrayList<String>> allLists) {
        ArrayList<String> combList = new ArrayList<String>(allLists.get(0));
        for (int i = 1; i < allLists.size(); i++) {
            combList = combineTwoLists(combList, allLists.get(i));
        }
        return combList;
    }


    // returns a list of cosets from the cosets file
    private ArrayList<ArrayList<String>> makeCosetList(String filename) {
        ArrayList<ArrayList<String>> cosetList = new ArrayList<ArrayList<String>>();
        // keep only identity from Coset 1 
        ArrayList<String> identity = new ArrayList<String>();
        identity.add("x,y,z");
        cosetList.add(identity);
        
        String line = "";
        try {
            Scanner scan2 = new Scanner(new File(filename));
            scan2.nextLine(); // "Coset 1:"
            for (; !scan2.nextLine().startsWith("C") ;) { }

            ArrayList<String> cosets = new ArrayList<String>();

            while (scan2.hasNextLine()) {
                line = scan2.nextLine();
                if (line.startsWith("(")) {
                    line = line.replace("(", "");
                    line = line.replace(")", "");
                    System.out.println("printing line");
                    System.out.println(line);
                    cosets.add(line);
                    System.out.println("printing cosets");
                    for (String coset : cosets) {
                        System.out.println(coset);
                    }
                }
                if (line.startsWith("C")) {
                    cosetList.add(new ArrayList<String>(cosets));
                    cosets.clear();
                }
            }
            cosetList.add(new ArrayList<String>(cosets));
        } catch (FileNotFoundException e) { }

        return cosetList;
    }


    public static void main(String[] args) throws Exception {

        try (final WebClient webClient = new WebClient()) {
            
            ArgTest argtest = new ArgTest();

            ArrayList<ArrayList<String>> cosetList = argtest.makeCosetList("coset_test2");


            // Get rid of all non-symmorphic elements
            for (ArrayList<String> cosets : cosetList) {

                Iterator<String> it = cosets.iterator();
                while (it.hasNext()) {

                    final HtmlPage page3 = webClient.getPage("http://www.cryst.ehu.es/cgi-bin/cryst/programs/checkgr.pl?tipog=gesp");

                    List<HtmlForm> forms = page3.getForms();

                    HtmlTextArea text = forms.get(0).getTextAreaByName("generators");

                    text.setText("x,y,z\n"+it.next());

                    HtmlSubmitInput submit = page3.getElementByName("list");
                    final HtmlPage page4 = submit.click();

                    List<HtmlAnchor> anchors = page4.getAnchors();

                    String gnum = anchors.get(3).getHrefAttribute().replaceAll("[\\D]", "");

                    if (!sgroups.contains(gnum)) {
                        it.remove();
                    }
                }
            }

            // no symmorphic groups possible if any list is empty
            for (ArrayList<String> cosets : cosetList) {
                if (cosets.isEmpty()) {
                    System.out.println("NO SGROUPS");
                    System.exit(0);
                }
            }

            boolean hasSym = false;


            for (ArrayList<String> cosets: cosetList) {
                System.out.println("printing cosets");
                for (String coset : cosets) {
                    System.out.println(coset);
                }
            }
            
            ArrayList<String> combinations = argtest.getCombinations(cosetList);

            // for (String cosets: combinations) {
            //     System.out.println("\n");
            //     System.out.println(cosets);
            // }


            for (String cosets : combinations) {

                final HtmlPage page4 = webClient.getPage("http://www.cryst.ehu.es/cgi-bin/cryst/programs/checkgr.pl?tipog=gesp");


                List<HtmlForm> forms = page4.getForms();

                HtmlTextArea text = forms.get(0).getTextAreaByName("generators");

                text.setText(cosets);

                HtmlSubmitInput submit = page4.getElementByName("list");
                final HtmlPage page5 = submit.click();

                List<HtmlAnchor> anchors = page5.getAnchors();

                String gnum = anchors.get(3).getHrefAttribute().replaceAll("[\\D]", "");

                if (sgroups.contains(gnum)) {
                    hasSym = true;
                    System.out.println("FOUND AN S GROUP!");
                    System.out.println(gnum);
                }


            }


        }

    }


}



